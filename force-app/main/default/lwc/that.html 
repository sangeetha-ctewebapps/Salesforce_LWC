<!DOCTYPE html>
<html>
<head>
    <title>FileUploader LWC</title>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <script src="https://cdn.jsdelivr.net/npm/lwc@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@salesforce-ux/design-system@latest"></script>
</head>
<body>
    <div>
        <label for="fileInput">Choose File:</label>
        <input type="file" id="fileInput" onchange={handleFileChange} accept=".txt, .pdf, .doc, .docx"/>
    </div>
    
    <template>
        <template for:each={errorMessages} for:item="error">
            <div key={error}>
                {error}
            </div>
        </template>
    </template>

    <script>
        import { LightningElement, api, wire } from 'lwc';
        import { ShowToastEvent } from 'lightning/platformShowToastEvent';
        import { createRecord, updateRecord } from 'lightning/uiRecordApi';
        import { getRecord } from 'lightning/uiRecordApi';

        export default class FileUploader extends LightningElement {
            @api recordId; // Service Request record Id

            file;
            fileName;
            fileReader;
            errorMessages = [];

            handleFileChange(event) {
                this.file = event.target.files[0];
                this.fileName = this.file.name;
                this.fileReader = new FileReader();
                this.fileReader.onloadend = this.handleFileReaderLoadEnd.bind(this);
                this.fileReader.readAsDataURL(this.file);
            }

            handleFileReaderLoadEnd() {
                let fileContents = this.fileReader.result.split(',')[1];
                let documentName = this.fileName;
                let createdBy = this.recordId; // Assuming the CreatedBy field is the record Id of the Service Request

                // Create a record for the file upload
                createRecord({
                    apiName: 'File_Upload__c', // Replace with the API name of the custom object
                    fields: {
                        Document_Name__c: documentName,
                        Created_By__c: createdBy,
                        Body: fileContents
                    }
                })
                .then(result => {
                    // Get the file URL from the response and display a success message
                    let documentURL = result.id;
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'File uploaded successfully',
                            variant: 'success'
                        })
                    );

                    // Save the file URL to the Service Request record
                    this.updateServiceRequestDocumentURL(documentURL);
                })
                .catch(error => {
                    // Display an error message if the file upload fails
                    this.errorMessages.push('Error uploading file: ' + error.body.message);
                });
            }

            updateServiceRequestDocumentURL(documentURL) {
                // Update the Service Request record with the AWS file link
                const fields = {};
                fields[DOCUMENT_URL_FIELD] = documentURL; // Replace with the API name of the Document URL field

                const recordInput = { fields };
                recordInput.Id = this.recordId;

                updateRecord(recordInput)
                    .then(() => {
                        // Display a success message
                        this.dispatchEvent(
                            new ShowToastEvent({
                                title: 'Success',
                                message: 'Document URL updated successfully',
                                variant: 'success'
                            })
                        );
                    })
                    .catch(error => {
                        // Display an error message if the update fails
                        this.errorMessages.push('Error updating document URL: ' + error.body.message);
                    });
            }
        }
    </script>
</body>
</html>